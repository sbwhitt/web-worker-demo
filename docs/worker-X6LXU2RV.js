var o=class{alpha;gamma;rar;radr;s;a;Q;constructor(t,r=1,e=.9,a=.5,n=.9){if(t.numStates===void 0&&t.numActions===void 0&&t.Q!==void 0)this.Q=t.Q;else if(t.numStates!==void 0&&t.numActions!==void 0)this.Q=this.buildQ(t.numStates,t.numActions);else throw Error("QLearner initialized with invalid options.");this.alpha=r,this.gamma=e,this.rar=a,this.radr=n}setState=t=>(this.s=t,this.a=this.selectAction(t,!1),this.a);query=(t,r,e)=>(this.updateQ(this.s,this.a,t,r),this.s=t,this.a=this.selectAction(t,e),this.rar=this.rar*this.radr,this.a);buildQ=(t,r)=>{let e=[];for(;e.length<t;)e.push(new Array(r).fill(0));return e};selectAction=(t,r)=>{let e=this.Q[t],a=Math.random();if(r&&a<=this.rar)return Math.floor(Math.random()*e.length);let n=0,s=e[n];for(let i=1;i<e.length;i++)e[i]>s&&(n=i,s=e[i]);return n};updateQ=(t,r,e,a)=>{let n=this.Q[t][r],s=this.Q[e][this.selectAction(e,!1)];this.Q[t][r]=n+this.alpha*(a+this.gamma*s-n)}};var m=class{numStates=Math.pow(3,9);numActions=9;LINES=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];qLearner;constructor(t){this.qLearner=t?new o({Q:t}):new o({numStates:this.numStates,numActions:this.numActions})}train(t){for(let e=0;e<t;e++){let a=0,n=0,s="000000000",i=this.toState(s),u=this.qLearner.setState(i),c="active";for(;c==="active"&&a<1e3;){s=this.updateBoard(i,u,!0),i=this.toState(s),c=this.getOutcome(i);let h=this.getReward(c);u=this.qLearner.query(i,h,!0),n+=h,a+=1}(e%Math.floor(t/100)===0||e===t-1)&&postMessage(e+1)}}getQTable(){return this.qLearner.Q}startGame(){let t=this.qLearner.setState(this.toState("000000000")),r=this.updateBoard(this.toState("000000000"),t,!1,1);return{board:r,outcome:this.getOutcome(this.toState(r))}}takePlayerTurn(t,r){let e=this.updateBoard(this.toState(r),t,!1,2);return e=this.takeLearnerTurn(e),{board:e,outcome:this.getOutcome(this.toState(e))}}takeLearnerTurn(t){let r=t,e=1e3,a=0;for(;r===t&&a<e;){let n=this.toState(r),s=this.getReward(this.getOutcome(n)),i=this.qLearner.query(n,s,!1);if(r=this.updateBoard(n,i,!1,1),this.getOutcome(this.toState(r))!=="active")return r;a++}return r}toBoard(t){return t.toString(3).padStart(9,"0")}toState(t){return Number.parseInt(t,3)}getOutcome(t){let r=this.toBoard(t);for(let e of this.LINES){let a=r[e[0]]+r[e[1]]+r[e[2]];if(a==="111")return"win";if(a==="222")return"lose"}for(let e of this.LINES){let a=r[e[0]]+r[e[1]]+r[e[2]];if(!(a.includes("1")&&a.includes("2")))return"active"}return"draw"}getReward(t){switch(t){case"win":return 3;case"lose":return-5;case"draw":return-1;case"active":return-2;default:return-1}}place(t,r,e){let a=[...t];return a[r]=e.toString(),a.join("")}placeOpponent(t){let r=[];if([...t].map((n,s)=>{n==="0"&&r.push(s)}),r.length===0)return t;let e=null,a=Math.random();for(let n of this.LINES){if(a<.5)break;let s=n[0],i=n[1],u=n[2];if(t[s]===t[i]&&t[u]==="0"){e=u;break}else if(t[s]===t[u]&&t[i]==="0"){e=i;break}else if(t[i]===t[u]&&t[s]==="0"){e=s;break}}return e=e||r[Math.floor(Math.random()*r.length)],this.place(t,e,2)}updateBoard(t,r,e=!1,a=1){let n=this.toBoard(t);return n[r]!=="0"?n:(n=this.place(n,r,a),e?this.placeOpponent(n):n)}};addEventListener("message",({data:l})=>{if(typeof l!="number")throw Error("Invalid data passed to worker.");let t=new m;t.train(l),postMessage(t.getQTable())});
