var l=class{alpha;gamma;rar;radr;s;a;Q;constructor(t,n=1,e=.9,r=.5,a=.9){if(t.numStates===void 0&&t.numActions===void 0&&t.Q!==void 0)this.Q=t.Q;else if(t.numStates!==void 0&&t.numActions!==void 0)this.Q=this.buildQ(t.numStates,t.numActions);else throw Error("QLearner initialized with invalid options.");this.alpha=n,this.gamma=e,this.rar=r,this.radr=a}setState=t=>(this.s=t,this.a=this.selectAction(t,!1),this.a);query=(t,n,e)=>(this.updateQ(this.s,this.a,t,n),this.s=t,this.a=this.selectAction(t,e),this.rar=this.rar*this.radr,this.a);buildQ=(t,n)=>{let e=[];for(;e.length<t;)e.push(new Array(n).fill(0));return e};selectAction=(t,n)=>{let e=this.Q[t],r=Math.random();if(n&&r<=this.rar)return Math.floor(Math.random()*e.length);let a=0,s=e[a];for(let i=1;i<e.length;i++)e[i]>s&&(a=i,s=e[i]);return a};updateQ=(t,n,e,r)=>{let a=this.Q[t][n],s=this.Q[e][this.selectAction(e,!1)];this.Q[t][n]=a+this.alpha*(r+this.gamma*s-a)}};var m=class{numStates=Math.pow(3,9);numActions=9;LINES=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];qLearner;constructor(t){this.qLearner=t?new l({Q:t}):new l({numStates:this.numStates,numActions:this.numActions}),t&&this.train(1)}train(t){for(let e=0;e<t;e++){let r=e%2===0?1:2,a=0,s=0,i=r===1?"000000000":this.placeOpponent("000000000",1),u=this.toState(i),o=this.qLearner.setState(u),c="active";for(;c==="active"&&a<1e3;){i=this.updateBoard(u,o,r,!0),u=this.toState(i),c=this.getOutcome(u,r);let b=this.getReward(c);o=this.qLearner.query(u,b,!0),s+=b,a+=1}(e%Math.floor(t/100)===0||e===t-1)&&postMessage(e+1)}}getQTable(){return this.qLearner.Q}startGame(t){let n="000000000";if(t===2){let e=this.qLearner.setState(this.toState(n));n=this.updateBoard(this.toState(n),e,1)}return{board:n,outcome:this.getOutcome(this.toState(n),t)}}takePlayerTurn(t,n,e){let r=this.updateBoard(this.toState(n),t,e);return r=this.takeLearnerTurn(r,e===1?2:1),{board:r,outcome:this.getOutcome(this.toState(r),e)}}takeLearnerTurn(t,n){let e=t,r=1e3,a=0;for(;e===t&&a<r;){let s=this.toState(e),i=this.getReward(this.getOutcome(s,n)),u=this.qLearner.query(s,i,!1);if(e=this.updateBoard(s,u,n),this.getOutcome(this.toState(e),n)!=="active")return e;a++}return e}toBoard(t){return t.toString(3).padStart(9,"0")}toState(t){return Number.parseInt(t,3)}getOutcome(t,n){let e=this.toBoard(t);for(let r of this.LINES){let a=e[r[0]]+e[r[1]]+e[r[2]];if(a==="111")return n===1?"win":"lose";if(a==="222")return n===2?"win":"lose"}for(let r of this.LINES){let a=e[r[0]]+e[r[1]]+e[r[2]];if(!(a.includes("1")&&a.includes("2")))return"active"}return"draw"}getReward(t){switch(t){case"win":return 3;case"lose":return-5;case"draw":return-1;case"active":return-2;default:return-1}}place(t,n,e){let r=[...t];return r[n]=e.toString(),r.join("")}placeOpponent(t,n){let e=[];if([...t].map((s,i)=>{s==="0"&&e.push(i)}),e.length===0)return t;let r=null,a=Math.random();for(let s of this.LINES){if(a<.5)break;let i=s[0],u=s[1],o=s[2];if(t[i]===t[u]&&t[o]==="0"){r=o;break}else if(t[i]===t[o]&&t[u]==="0"){r=u;break}else if(t[u]===t[o]&&t[i]==="0"){r=i;break}}return r=r||e[Math.floor(Math.random()*e.length)],this.place(t,r,n)}updateBoard(t,n,e,r=!1){let a=this.toBoard(t);return a[n]!=="0"?a:(a=this.place(a,n,e),r?this.placeOpponent(a,e===1?2:1):a)}};addEventListener("message",({data:h})=>{if(typeof h!="number")throw Error("Invalid data passed to worker.");let t=new m;t.train(h),postMessage(t.getQTable())});
